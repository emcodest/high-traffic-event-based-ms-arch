services:
  node_app_api: # we are going to use upstream block to load balance dis server in nginx and scale horizontally
    container_name: node-service
    restart: unless-stopped
    build:
      context: ./node-service
      dockerfile: node.Dockerfile
    ports:
      - "9001:9001"
    volumes:
      - ./node-service:/app
      # - /usr/src/app/node_modules
    env_file:
      - ./node-service/.env
  #   depends_on:
  #     - redis
  # node_consumer_worker_per_ms: # means this worker is only for the micro service (ms) with a particular queue name
  #   # container_name: node-cworker
  #   restart: unless-stopped
  #   build:
  #     context: ./node-service
  #     dockerfile: node.consumer.Dockerfile
  #   deploy: 
  #     replicas: 3 # 3 background consumer workers to process jobs from redis bull queue
  #   # ports:
  #   #   - "9001:9001"
  #   volumes:
  #     - ./node-service:/app
  #   env_file:
  #     - ./node-service/.env
  #   depends_on:
  #     - redis
  #     # - node_app_api
  # redis:
  #   container_name: queue-redis-server
  #   image: redis:7.2.3
  #   volumes:
  #     - ./redis-data/:/data
  #     # - /var/www/myapp/redis-data/:/data
  #   ports:
  #     - "6379:6379"
  # nginx:
  #   container_name: nginx-server
  #   image: nginx:1.25.3
  #   restart: unless-stopped
  #   build:
  #     context: .
  #     dockerfile: nginx.Dockerfile
  #   volumes:
  #     - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
  #   ports: 
  #     - "80:80"
  #     # - "443:443"